// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  users User[]
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password_hash  String
  emailValidated Boolean  @default(false)
  is_active      Boolean  @default(true)
  image          String?
  created_at     DateTime @default(now())
  role           Role?    @relation(fields: [role_id], references: [id])
  role_id        Int?

  categories Category[]
  notes      Note[]
  tags       Tag[]
}

model Category {
  id      String  @id @default(uuid())
  name    String
  color   String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String?

  notes Note[]

  @@unique([name, user_id]) // cada usuario no puede tener dos categor√≠as con el mismo nombre
}

model Note {
  id          String    @id @default(uuid())
  title       String?
  content     String?
  is_archived Boolean   @default(false)
  is_pinned   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  category_id String?

  tags   NoteTag[]
  images NoteImage[]

  SubNote SubNote[]

  @@unique([title, user_id])
}

model Tag {
  id      String  @id @default(uuid())
  name    String
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String?

  notes      NoteTag[]
  SubNoteTag SubNoteTag[]

  @@unique([name, user_id]) // cada usuario no puede repetir un tag con el mismo nombre
}

model NoteTag {
  note    Note   @relation(fields: [note_id], references: [id], onDelete: Cascade)
  note_id String
  tag     Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id  String

  @@id([note_id, tag_id]) // clave compuesta
}

model NoteImage {
  id         String   @id @default(uuid())
  url        String
  public_id  String?
  alt_text   String?
  created_at DateTime @default(now())
  note       Note     @relation(fields: [note_id], references: [id], onDelete: Cascade)
  note_id    String
}

model SubNote {
  id          String         @id @default(uuid())
  title       String
  description String?
  note        Note           @relation(fields: [note_id], references: [id], onDelete: Cascade)
  note_id     String
  tags        SubNoteTag[]
  images      SubNoteImage[]
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  is_archived Boolean        @default(false)
  is_pinned   Boolean        @default(false)

  @@unique([title, note_id])
}

model SubNoteTag {
  subNote     SubNote @relation(fields: [sub_note_id], references: [id], onDelete: Cascade)
  sub_note_id String
  tag         Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id      String

  @@id([sub_note_id, tag_id])
}

model SubNoteImage {
  id          String   @id @default(uuid())
  url         String
  subNote     SubNote  @relation(fields: [sub_note_id], references: [id], onDelete: Cascade)
  alt_text    String?
  sub_note_id String
  created_at  DateTime @default(now())
  public_id   String?
}

model Setting {
  key         String   @id
  value       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
